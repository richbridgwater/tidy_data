str(gdp)
edu <- read.csv("edu.csv")
str(edu)
# read in csv data with a few different parameters
gdpraw <- read.csv("gdp.csv", stringsAsFactors=FALSE, header=FALSE)
# remove columns that have no data
gdpraw$V3 <- NULL
gdpraw$V6 <- NULL
gdpraw$V7 <- NULL
gdpraw$V8 <- NULL
gdpraw$V9 <- NULL
gdpraw$V10 <- NULL
names(gdpraw) <- c("code", "rank","economy", "dollars")
# get rows with data
gdpraw <- gdpraw[6:237,]
# covert to numbers and integers
gdpraw$dollars <- as.numeric(gsub(",","", gdpraw$dollars))
gdpraw$rank <- as.integer(gdpraw$rank)
# remove rows that have missing data
rm_rows <- complete.cases(gdpraw[,2])
final_gdp <- gdpraw[rm_rows,]
# rename table columns
names(final_gdp) <- c("CountryCode", "rank","economy", "dollars")
# gdp data is now clean!!
# now check which rows match between the final_gdp and edu data sets using CountryCode as the key
index <- match(final_gdp$CountryCode, edu$CountryCode)
# use that vector to extract only rows from EDU data set that match the CountryCode key column --> store new dataset in final_edu
final_edu <- edu[index,]
# merge the two datasets
newdata <- merge(final_gdp,final_edu)
# convert the new data set to dyplr table
newdata2 <- tbl_df(newdata)
# arrange that dataset descending by "rank" column
newdata3 <- arrange(newdata2, desc(rank))
# now let's check if the rank sequence is uninterrupted - is anything missing
!(1:190 %in% newdata3$rank)
# now let's check if there are any duplicates in that column - are there any extra duplicates
duplicated(newdata3$rank)
# We know there is duplicate values and a missign value - lets create and check the entire table
# This won't work well for large data sets
View(newdata3[,1:3])
features <- read.table("getdata-projectfiles-UCI HAR Dataset\\UCI HAR Dataset\\features.txt")
features <- read.table("UCI HAR Dataset\\features.txt")
getwd()
features <- read.table("UCI HAR Dataset/features.txt")
features
subset_mean <- features[grep("mean()", features$V2, fixed = TRUE), ]
subset_std <- features[grep("std()", features$V2, fixed = TRUE), ]
View(subset_std)
# test subjects 2-24
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# test results - 561 variables
X_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# test actyivity labels - 6 variables
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
# subjects 1-30
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# training set - 561 variables
X_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# training labels
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
# subjects 1-30
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# training set - 561 variables
X_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# training labels
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
summary(y_train
)
str(y_train)
head(subject_test)
head(subject_train)
head(subset_mean)
head(subset_std)
head(X_test)
subset_mean
features <- read.table("UCI HAR Dataset/features.txt") # for MAC
# Subset of mean measurements
subset_mean <- features[grep("mean()", features$V2, fixed = FALSE), ] # fixed = TRUE will do an exact match / FALSE = character match
# Subset of standard deviation measurements
subset_std <- features[grep("std()", features$V2, fixed = FALSE), ]
?select
# test subjects 2-24
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# test results - 561 variables
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# test actyivity labels - 6 variables
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
# subjects 1-30
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# training set - 561 variables
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# training labels
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
head(y_test)
View(x_test,[1,1:10])
View(x_test[1,1:10])
rbind(subset_mean, subset_std)
subset_cmb <- rbind(subset_mean, subset_std)
str(subset_cmb)
x_test_df <- tbl_df(x_test)
x_test_df
y_test_df <- tbl_df(y_test)
rm(y_test_df)
x_train_df <- tbl_df(x_train)
features <- read.table("UCI HAR Dataset/features.txt") # for MAC
# Subset of mean measurements
subset_mean <- features[grep("mean()", features$V2, fixed = TRUE), ] # fixed = TRUE will do an exact match / FALSE = character match
# Subset of standard deviation measurements
subset_std <- features[grep("std()", features$V2, fixed = TRUE), ]
#goal is to create one table -> |subject|session|activity|ME1|ME2|ME3|ME4|
# use select() to combine into one table
# use two columns to extract data from X_test
# select total$V1 from X_test
# Give new labels to the measurment variables
# Import test data ---------------------------------------------------------------------------------------
# test subjects 2-24
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# test results - 561 variables
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# test actyivity labels - 6 variables
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
#Import train data ------------------------------------------------------------------------------------------
# subjects 1-30
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# training set - 561 variables
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# training labels
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
# Combine mean and std features
subset_cmb <- rbind(subset_mean, subset_std)
# convert TESTING data df to dplyr df - makes a bit easier
x_test_df <- tbl_df(x_test)
# convert TRAINING data df to dplyr df
x_train_df <- tbl_df(x_train)
features <- read.table("UCI HAR Dataset/features.txt") # for MAC
# Subset of mean measurements
subset_mean <- features[grep("mean()", features$V2, fixed = TRUE), ] # fixed = TRUE will do an exact match / FALSE = character match
# Subset of standard deviation measurements
subset_std <- features[grep("std()", features$V2, fixed = TRUE), ]
#goal is to create one table -> |subject|session|activity|ME1|ME2|ME3|ME4|
# use select() to combine into one table
# use two columns to extract data from X_test
# select total$V1 from X_test
# Give new labels to the measurment variables
# Import test data ---------------------------------------------------------------------------------------
# test subjects 2-24
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# test results - 561 variables
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# test actyivity labels - 6 variables
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
#Import train data ------------------------------------------------------------------------------------------
# subjects 1-30
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# training set - 561 variables
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# training labels
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
# Combine mean and std features
subset_cmb <- rbind(subset_mean, subset_std)
# convert TESTING data df to dplyr df - makes a bit easier
x_test <- tbl_df(x_test)
# convert TRAINING data df to dplyr df
x_train <- tbl_df(x_train)
?select
tester <- select(x_test, subset_cmb)
head(subset_cmb)
tail(subset_cmb)
tester <- select(x_test, subset_cmb$V1)
trainer <- select(x_train, subset_cmb$V1)
head(y_test)
?cbind
dplyr
?dplyr
?mutate
mutate(tester, subjects = y_test$V)
mutate(tester, subjects = y_test$V1)
mutate(tester, y_test)
mutate(tester, subjects = y_test)
mutate(tester, subjects = y_test$V1)
mutate(tester, subjects)
cbind(tester, ytest$V1)
cbind(tester, y_test$V1)
cbind(y_test, tester)
head(tester)
tester[1,1:4]
cbinder <- cbind(y_test, tester)
head(cbinder)
head(y_test)
cbinder <- cbind(y_test, tester)
rm(cbinder)
test_bind <- cbind(y_test, tester)
train_bind <- cbind(y_train, trainer)
str(test_bind)
summary(test_bind)
head(test_bind, 1)
tail(test_bind, 5)
head(test_bind2, 1)
test_bind2 <- cbind(subject_test, test_bind)
train_bind2 <- cbind(subject_train, train_bind)
head(test_bind2, 1)
head(test_bind2, [1,1:3])
View(test_bind2[10,1:3])
View(test_bind2[1:100,1:4])
View(train_bind2[1:100,1:4])
final_table <- rbind(test_bind2, train_bind2)
7352+2947
str(final_table)
subset_cmb
new_var_names <- subset_cmb[grep("()","-", subset_cmb$V2, fixed = FALSE), ]
new_var_names
new_var_names <- subset_cmb[grep("()", subset_cmb$V2, fixed = FALSE), ]
new_var_names
new_var_names <- gsub("()","-", subset_cmb$V2)
new_var_names
new_var_names <- gsub("()", subset_cmb$V2)
new_var_names <- gsub("()","", subset_cmb$V2)
new_var_names
?gsub
new_var_names <- gsub("\\(\\)","", subset_cmb$V2)
new_var_names
new_var_names <- gsub("\\-","", subset_cmb$V2)
new_var_names
new_var_names <- gsub("\\(\\)","", subset_cmb$V2)
new_var_names <- gsub("\\-","", new_var_names)
new_var_names
subject_label <- "subject"
activity_label <- "activity"
final_column_labels <- subject_label + activity_label + new_var_names
subject_label <- "subject"
activity_label <- "activity"
final_column_labels <- c(subject_label,activity_label,new_var_names)
final_column_labels
?names
colnames(final_table) <- final_column_labels
str(final_table)
%in%
?%in%
?//%in%
?'%in%'
final_table$activity <- as.character(final_table$activity)
str(final_table)
final_table$activity[final_table$activity %in% "1"] <- "walking"
final_table$activity[final_table$activity %in% "2"] <- "walking_up"
View(final_table[1:100, 1:4])
summer <- summarise(final_table, mean(final_table[,3:68]))
summer <- summarise(final_table, mean(final_table[,3]))
View(summer[100,1:4])
View(summer[1:100,1:4])
summer
summer <- summarize(final_table, mean(final_table[,3:68]))
summer <- final_table[, lapply(.SD,mean), by=subject]
summer <- final_table[, lapply(.SD,mean), by=ID]
df %>% group_by(grp) %>% summarise_each(funs(mean))
summer <- final_table
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject)%>%summarise_each(funs(mean))
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
final_table$activity[final_table$activity %in% "1"] <- "walking"
final_table$activity[final_table$activity %in% "2"] <- "walking_up"
final_table$activity[final_table$activity %in% "3"] <- "walking_dn"
final_table$activity[final_table$activity %in% "4"] <- "sitting"
final_table$activity[final_table$activity %in% "5"] <- "standing"
final_table$activity[final_table$activity %in% "6"] <- "laying"
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
group_by(final_table,subject)
group_by(final_table,subject,activity)
> summer <- final_table
> summer <- tbl_df(final_table)
summer <- final_table
summer <- tbl_df(final_table)
group_by(summer,subject,activity)
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
View(summer[1:100,1:4])
summer <- final_table
summer <- tbl_df(final_table)
final <- summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
View(final[1:100,1:4])
summer <- final_table
summer <- tbl_df(final_table)
final2 <- summer%>%group_by(subject,activity)
View(final2[1:100,1:4])
summer <- final_table
summer <- tbl_df(final_table)
final <- summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
View(final[1:100,1:4])
summer <- final_table
summer <- tbl_df(final_table)
final2 <- summer%>%group_by(subject)
View(final2[1:100,1:3])
summer <- final_table
summer <- tbl_df(final_table)
final2 <- summer%>%group_by(subject,activity)
final2
summer <- final_table
summer <- tbl_df(final_table)
final2 <- summer%>%group_by(subject, activity)
final2
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)%>%summarise_each()
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)
?group_by
group_by(final_table,subject,activity)
group(final_table,subject)
tested <- group_by(final_table,subject,activity)
sort(tested,subject)
tested <- tabl_df(tested)
tested <- tbl_df(tested)
sort(tested, subject)
?sort
arrange(tested, subject)
arrange(tested, subject, activity)
tested2 <- arrange(tested, subject, activity)
View(tested2[1:100, 1:3])
tested3 <- tested2[1:50,3]
tested3
mean(tested3)
sum(tested)
as_numeric(tested3)
as.numeric(tested3)
sum(tested[,1])
sum(tested3[,1])
11.07991/50
summer <- final_table
summer <- tbl_df(final_table)
summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
df %>% group_by(grp) %>% summarise_each(funs(mean))
?summarize_each
?summarise_each
new_var_names
str(summer)
summary(summer)
str(subset_cmb)
subset_cmb
y_train
# Ok here we go...
# Let's first read in the features.txt file
features <- read.table("UCI HAR Dataset/features.txt")
# Now, I want to figure out columns to extract from the test and training data sets.
# We know we want the "mean" and "standard deviation" measurements, so I will
# search the newly created "features" object and extract two subsets
# based on the character strings "mean()" and "std()"
# extract a subset of mean measurement labels from "features"
subset_mean <- features[grep("mean()", features$V2, fixed = TRUE), ]
# extract a subset of standard deviation measurement labels from "features"
subset_std <- features[grep("std()", features$V2, fixed = TRUE), ]
# then I will combine the mean and std measurement label subsets into one table
subset_cmb <- rbind(subset_mean, subset_std)
# Let's import the remaining test and training data files
# Testing data --------------------------------------------------------------------
# get test subject IDs - 1 variable
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# get test data measurements - 561 variables
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# get test actyivity labels codes - 1 variable
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
# Training data -------------------------------------------------------------------
# get training subjects IDs - 1 variable
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# get training data measurements - 561 variables
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# get training label codes - 1 variable
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
# Just to be safe, I'm going to use the dplyr package to convert the dfs to tbl_dfs
# so they are easier to work with (just in case)
# convert testing and training data dfs to dplyr tbl_dfs
# x_test <- tbl_df(x_test)
# x_train <- tbl_df(x_train)
# convert both activity labels df to dplyr tbl_df
# y_test <- tbl_df(y_test)
# y_train <- table_df(y_train)
# Now I'll start putting together the final test and training dataframes.
# I'll use just the "subset_cmb" object and extract the mean and
# standard deviation columns from the test and training dataframes that have 561 columns
# Which will reduce it to 66 columns.
x_test <- select(x_test, subset_cmb$V1)
x_train <- select(x_train, subset_cmb$V1)
# Let's now add the activity labels using cbind to both those new test and training tables.
test_bind <- cbind(y_test, x_test)
train_bind <- cbind(y_train, x_train)
# Then we can add the subject IDs to both those tables, again using cbind.
test_bind2 <- cbind(subject_test, test_bind)
train_bind2 <- cbind(subject_train, train_bind)
# I now have two tables for test and training structured
# like this --> | subject | activity | ME1 | ME2 | ME3 | ME4 ...and so on.
# Now I can combine both those tables (test and training) into one.
final_table <- rbind(test_bind2, train_bind2)
# Next I want to clean up the column names and remove the parenthesis and dashes from the final table
new_var_names <- gsub("\\(\\)","", subset_cmb$V2)
new_var_names <- gsub("\\-","", new_var_names)
# create vectors for subject and activity column names
subject_label <- "subject"
activity_label <- "activity"
# combine vectors
final_column_labels <- c(subject_label,activity_label,new_var_names)
# rename variables in final table
colnames(final_table) <- final_column_labels
#convert activity table to character to avoid cohersion errors
final_table$activity <- as.character(final_table$activity)
# convert all activity code numbers to text labels
final_table$activity[final_table$activity %in% "1"] <- "walking"
final_table$activity[final_table$activity %in% "2"] <- "walking_up"
final_table$activity[final_table$activity %in% "3"] <- "walking_dn"
final_table$activity[final_table$activity %in% "4"] <- "sitting"
final_table$activity[final_table$activity %in% "5"] <- "standing"
final_table$activity[final_table$activity %in% "6"] <- "laying"
summer <- final_table
summer <- tbl_df(final_table)
#Apply one or more functions to one or more columns.
#Grouping variables are always excluded from modification.
summer%>%group_by(subject,activity)%>%summarise_each(funs(mean))
df %>% group_by(grp) %>% summarise_each(funs(mean))
> sum(tested3[,1])
[1] 11.07991
> 11.07991/50
[1] 0.2215982
# Ok here we go...
# Let's first read in the features.txt file
features <- read.table("UCI HAR Dataset/features.txt")
# Now, I want to figure out columns to extract from the test and training data sets.
# We know we want the "mean" and "standard deviation" measurements, so I will
# search the newly created "features" object and extract two subsets
# based on the character strings "mean()" and "std()"
# extract a subset of mean measurement labels from "features"
subset_mean <- features[grep("mean()", features$V2, fixed = TRUE), ]
# extract a subset of standard deviation measurement labels from "features"
subset_std <- features[grep("std()", features$V2, fixed = TRUE), ]
# then I will combine the mean and std measurement label subsets into one table
subset_cmb <- rbind(subset_mean, subset_std)
# Let's import the remaining test and training data files
# Testing data --------------------------------------------------------------------
# get test subject IDs - 1 variable
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
# get test data measurements - 561 variables
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
# get test actyivity labels codes - 1 variable
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
# Training data -------------------------------------------------------------------
# get training subjects IDs - 1 variable
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# get training data measurements - 561 variables
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
# get training label codes - 1 variable
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
# Just to be safe, I'm going to use the dplyr package to convert the dfs to tbl_dfs
# so they are easier to work with (just in case)
# convert testing and training data dfs to dplyr tbl_dfs
# x_test <- tbl_df(x_test)
# x_train <- tbl_df(x_train)
# convert both activity labels df to dplyr tbl_df
# y_test <- tbl_df(y_test)
# y_train <- table_df(y_train)
# Now I'll start putting together the final test and training dataframes.
# I'll use just the "subset_cmb" object and extract the mean and
# standard deviation columns from the test and training dataframes that have 561 columns
# Which will reduce it to 66 columns.
x_test <- select(x_test, subset_cmb$V1)
x_train <- select(x_train, subset_cmb$V1)
# Let's now add the activity labels using cbind to both those new test and training tables.
test_bind <- cbind(y_test, x_test)
train_bind <- cbind(y_train, x_train)
# Then we can add the subject IDs to both those tables, again using cbind.
test_bind2 <- cbind(subject_test, test_bind)
train_bind2 <- cbind(subject_train, train_bind)
# I now have two tables for test and training structured
# like this --> | subject | activity | ME1 | ME2 | ME3 | ME4 ...and so on.
# Now I can combine both those tables (test and training) into one.
final_table <- rbind(test_bind2, train_bind2)
# Next I want to clean up the column names and remove the parenthesis and dashes from the final table
new_var_names <- gsub("\\(\\)","", subset_cmb$V2)
new_var_names <- gsub("\\-","", new_var_names)
# create vectors for first two column names
subject_label <- "subject"
activity_label <- "activity"
# combine all the column names
final_column_labels <- c(subject_label,activity_label,new_var_names)
# rename the column names in the final table
colnames(final_table) <- final_column_labels
#convert activity table to character to avoid cohersion errors
final_table$activity <- as.character(final_table$activity)
# convert all activity code numbers to text labels
final_table$activity[final_table$activity %in% "1"] <- "walking"
final_table$activity[final_table$activity %in% "2"] <- "walking_up"
final_table$activity[final_table$activity %in% "3"] <- "walking_dn"
final_table$activity[final_table$activity %in% "4"] <- "sitting"
final_table$activity[final_table$activity %in% "5"] <- "standing"
final_table$activity[final_table$activity %in% "6"] <- "laying"
#convert to dplyr dataframe
tidy_data <- tbl_df(final_table)
#Grouping variables are always excluded from modification.
tidy_data%>%group_by(subject,activity)%>%summarise_each(funs(mean))
write.table(tidy_data, row.name=FALSE)
?write_table
?write.table()
write.table(run_analysis.R, row.name=FALSE)
write.table(tidy_data, row.name=FALSE)
write.table(tidy_data, file = "tidy_data", row.names = FALSE)
write.table(tidy_data, file = "tidy_data.txt", row.names = FALSE)
